#!/usr/bin/env python
# -*- coding: utf-8 -*-

import math
import argparse
import re

# Скрипт способен моделировать полёт низкоскоростных (Mach < 1) и низколетящих объектов.
# В соотвествии с законами механики и аэродинамики, в условиях земноподобной планеты.

# Примеры
# Взлёт пегаса на одном цикле двигателя и снижение:
# python aerodynamic-calculator.py Пегас
# Поиск оптимальной (по дальности) скорости и угла атаки:
# python aerodynamic-calculator.py -m Пегас
# python aerodynamic-calculator.py -m Тяжёлый планёр
# Полёт пегаса с полезной нагрузкой в 300 килограмм, скоростью в 200 км/час и углом атаки в 15 градусов:
# python aerodynamic-calculator.py -m Пегас -w 300 -s 200 -a 15

#-------------------------------------------------------------------------
# Общие переменные:

# Плотность воздуха (нужно поставить зависимость от высоты):
AIR_DENSITY = 1.2
# Ускорение свободного падения:
GRAVITATIONAL_ACCELERATION = 9.8
# На разных высотах разная концентрация частиц, лучше сделать словарём/формулой:
AIR_MAGIC_ENERGY_MJ = 0.001
# Летательный аппарат по умолчанию:
SAMPLE = 'Пегас'
# Предельная скорость модели:
MAX_SPEED = 500

#-------------------------------------------------------------------------
# Опции:

dict_samples = {}

dict_samples['Пегас'] = {
        'Масса аппарата (килограмм)':70,
        'Рабочее вещество ВРД (килограмм)':5,
        'Скорость реактивной струи (метров/секунду)':437,
        'Энергии на сжатие рабочего вещества (мегаджоулей)':1.3,
        'Запас энергии (мегаджоулей)':45,
        'Размах крыла (метров)':4,
        'Хорда крыла (метров)':0.35,
        'Толщина крыла (метров)':0.35/10,
        'Несущая площадь крыла (квадратных метров)':1.4,
        'Фронтальная площадь крыла (квадратных метров)':(0.35/10)*4,
        'Длина фюзеляжа (метров)':1.43,
        'Ширина фюзеляжа (метров)':0.38,
        'Фронтальная площадь фюзеляжа (квадратных метров)':0.12,
        'Коэффициент лобового сопротивления фюзеляжа':0.17,
        'Дисколёт':False,
        # http://airfoiltools.com/images/airfoil/goe796-il_l.png
        # http://airfoiltools.com/airfoil/details?airfoil=goe796-il
        # http://airfoiltools.com/polar/details?polar=xf-goe796-il-1000000-n5
        'Поляра профиля крыла':{
            # Xfoil polar. Reynolds number fixed. Mach  number fixed
            # Polar key,xf-goe796-il-1000000-n5
            # Airfoil,goe796-il
            # Reynolds number,1000000
            # Ncrit,5
            # Mach,0
            # Max Cl/Cd,105.186
            # Max Cl/Cd alpha,4.75
            # Url,http://airfoiltools.com/polar/csv?polar=xf-goe796-il-1000000-n5
            # 
            # Alpha,Cl,Cd,Cdp,Cm,Top_Xtr,Bot_Xtr
            -14.500:(-0.7184,0.09505,0.09285,-0.0435,1.0000,0.0126),
            -14.250:(-0.7933,0.07833,0.07598,-0.0538,1.0000,0.0125),
            -14.000:(-0.9955,0.03555,0.03243,-0.0901,1.0000,0.0118),
            -13.750:(-1.0103,0.03312,0.02988,-0.0876,0.9999,0.0118),
            -13.500:(-0.9952,0.03086,0.02748,-0.0893,0.9950,0.0120),
            -13.250:(-0.9776,0.02911,0.02561,-0.0903,0.9899,0.0121),
            -13.000:(-0.9582,0.02761,0.02400,-0.0910,0.9853,0.0122),
            -12.750:(-0.9381,0.02629,0.02257,-0.0915,0.9810,0.0123),
            -12.500:(-0.9188,0.02509,0.02127,-0.0914,0.9755,0.0124),
            -12.000:(-0.8789,0.02298,0.01894,-0.0909,0.9651,0.0127),
            -11.750:(-0.8587,0.02205,0.01790,-0.0904,0.9598,0.0128),
            -11.500:(-0.8380,0.02120,0.01694,-0.0899,0.9547,0.0129),
            -11.250:(-0.8166,0.02044,0.01609,-0.0893,0.9491,0.0131),
            -11.000:(-0.7947,0.01974,0.01529,-0.0887,0.9440,0.0133),
            -10.750:(-0.7721,0.01905,0.01451,-0.0882,0.9390,0.0134),
            -10.500:(-0.7492,0.01841,0.01377,-0.0878,0.9332,0.0136),
            -10.250:(-0.7259,0.01782,0.01309,-0.0872,0.9279,0.0138),
            -10.000:(-0.7018,0.01723,0.01241,-0.0869,0.9227,0.0139),
            -9.750:(-0.6775,0.01670,0.01180,-0.0865,0.9166,0.0141),
            -9.500:(-0.6529,0.01622,0.01123,-0.0861,0.9109,0.0142),
            -9.250:(-0.6282,0.01566,0.01058,-0.0858,0.9043,0.0143),
            -9.000:(-0.6034,0.01514,0.00997,-0.0854,0.8977,0.0143),
            -8.750:(-0.5780,0.01465,0.00940,-0.0851,0.8909,0.0144),
            -8.500:(-0.5526,0.01419,0.00885,-0.0848,0.8830,0.0144),
            -8.250:(-0.5268,0.01375,0.00833,-0.0845,0.8749,0.0144),
            -8.000:(-0.5009,0.01335,0.00783,-0.0842,0.8664,0.0145),
            -7.750:(-0.4746,0.01295,0.00736,-0.0840,0.8571,0.0145),
            -7.500:(-0.4483,0.01259,0.00692,-0.0838,0.8471,0.0145),
            -7.250:(-0.4223,0.01217,0.00640,-0.0835,0.8357,0.0146),
            -7.000:(-0.3959,0.01178,0.00592,-0.0833,0.8236,0.0147),
            -6.750:(-0.3692,0.01144,0.00549,-0.0831,0.8118,0.0148),
            -6.500:(-0.3423,0.01114,0.00510,-0.0829,0.7998,0.0149),
            -6.250:(-0.3154,0.01087,0.00474,-0.0828,0.7876,0.0150),
            -6.000:(-0.2882,0.01062,0.00441,-0.0826,0.7757,0.0151),
            -5.750:(-0.2607,0.01039,0.00411,-0.0825,0.7654,0.0153),
            -5.500:(-0.2332,0.01018,0.00383,-0.0825,0.7565,0.0154),
            -5.250:(-0.2055,0.00997,0.00357,-0.0824,0.7476,0.0156),
            -5.000:(-0.1777,0.00979,0.00333,-0.0824,0.7395,0.0159),
            -4.750:(-0.1499,0.00963,0.00312,-0.0824,0.7308,0.0162),
            -4.500:(-0.1219,0.00948,0.00292,-0.0824,0.7226,0.0164),
            -4.250:(-0.0940,0.00936,0.00274,-0.0823,0.7136,0.0166),
            -4.000:(-0.0658,0.00923,0.00257,-0.0824,0.7061,0.0169),
            -3.750:(-0.0377,0.00912,0.00241,-0.0824,0.6992,0.0174),
            -3.500:(-0.0093,0.00901,0.00228,-0.0824,0.6933,0.0178),
            -3.250:(0.0190,0.00890,0.00214,-0.0825,0.6860,0.0192),
            -3.000:(0.0467,0.00869,0.00198,-0.0825,0.6794,0.0313),
            -2.750:(0.0750,0.00854,0.00187,-0.0826,0.6736,0.0427),
            -2.500:(0.1033,0.00846,0.00178,-0.0826,0.6672,0.0481),
            -2.250:(0.1318,0.00838,0.00170,-0.0827,0.6613,0.0529),
            -2.000:(0.1601,0.00830,0.00163,-0.0828,0.6542,0.0580),
            -1.750:(0.1883,0.00822,0.00156,-0.0829,0.6468,0.0684),
            -1.500:(0.2165,0.00811,0.00153,-0.0829,0.6383,0.0873),
            -1.250:(0.2449,0.00809,0.00150,-0.0830,0.6311,0.0948),
            -1.000:(0.2736,0.00806,0.00146,-0.0832,0.6248,0.0989),
            -0.500:(0.3306,0.00799,0.00141,-0.0834,0.6132,0.1106),
            -0.250:(0.3590,0.00795,0.00139,-0.0835,0.6063,0.1202),
            0.000:(0.3872,0.00794,0.00138,-0.0835,0.5963,0.1273),
            0.250:(0.4151,0.00794,0.00137,-0.0836,0.5828,0.1391),
            0.500:(0.4428,0.00791,0.00138,-0.0836,0.5701,0.1624),
            0.750:(0.4706,0.00786,0.00139,-0.0836,0.5590,0.1962),
            1.000:(0.4985,0.00782,0.00141,-0.0837,0.5481,0.2299),
            1.250:(0.5260,0.00778,0.00145,-0.0837,0.5355,0.2714),
            1.750:(0.5788,0.00755,0.00157,-0.0834,0.4970,0.4509),
            2.000:(0.6045,0.00750,0.00167,-0.0832,0.4719,0.5421),
            2.250:(0.6288,0.00739,0.00179,-0.0827,0.4441,0.6663),
            2.500:(0.6521,0.00734,0.00194,-0.0818,0.4149,0.7780),
            2.750:(0.6711,0.00719,0.00213,-0.0797,0.3927,0.9270),
            3.000:(0.7055,0.00741,0.00229,-0.0811,0.3718,0.9783),
            3.250:(0.7464,0.00765,0.00244,-0.0841,0.3551,0.9956),
            3.750:(0.8076,0.00797,0.00267,-0.0856,0.3354,1.0000),
            4.250:(0.8568,0.00829,0.00291,-0.0843,0.3178,1.0000),
            4.500:(0.8816,0.00847,0.00304,-0.0838,0.3105,1.0000),
            4.750:(0.9067,0.00862,0.00317,-0.0833,0.3014,1.0000),
            5.000:(0.9310,0.00886,0.00333,-0.0826,0.2858,1.0000),
            5.250:(0.9548,0.00913,0.00351,-0.0820,0.2673,1.0000),
            5.500:(0.9781,0.00945,0.00371,-0.0812,0.2422,1.0000),
            5.750:(0.9971,0.01009,0.00406,-0.0798,0.1915,1.0000),
            6.250:(1.0416,0.01088,0.00465,-0.0780,0.1550,1.0000),
            6.500:(1.0656,0.01115,0.00490,-0.0774,0.1477,1.0000),
            6.750:(1.0900,0.01138,0.00512,-0.0769,0.1422,1.0000),
            7.000:(1.1135,0.01167,0.00537,-0.0762,0.1350,1.0000),
            7.250:(1.1374,0.01192,0.00561,-0.0756,0.1278,1.0000),
            7.500:(1.1600,0.01226,0.00590,-0.0748,0.1180,1.0000),
            7.750:(1.1817,0.01264,0.00621,-0.0739,0.1048,1.0000),
            8.000:(1.2018,0.01313,0.00659,-0.0727,0.0880,1.0000),
            8.250:(1.2218,0.01359,0.00699,-0.0716,0.0761,1.0000),
            8.500:(1.2422,0.01401,0.00738,-0.0704,0.0685,1.0000),
            8.750:(1.2625,0.01440,0.00775,-0.0693,0.0626,1.0000),
            9.000:(1.2818,0.01482,0.00815,-0.0680,0.0568,1.0000),
            9.250:(1.2992,0.01525,0.00856,-0.0663,0.0515,1.0000),
            9.500:(1.3167,0.01567,0.00899,-0.0647,0.0476,1.0000),
            9.750:(1.3326,0.01620,0.00949,-0.0629,0.0414,1.0000),
            10.000:(1.3472,0.01682,0.01007,-0.0609,0.0335,1.0000),
            10.250:(1.3592,0.01761,0.01080,-0.0587,0.0236,1.0000),
            10.500:(1.3730,0.01833,0.01150,-0.0568,0.0193,1.0000),
            10.750:(1.3881,0.01898,0.01217,-0.0552,0.0171,1.0000),
            11.000:(1.4035,0.01962,0.01284,-0.0536,0.0158,1.0000),
            11.250:(1.4179,0.02034,0.01359,-0.0520,0.0146,1.0000),
            11.500:(1.4330,0.02104,0.01432,-0.0506,0.0138,1.0000),
            11.750:(1.4479,0.02175,0.01507,-0.0492,0.0129,1.0000),
            12.000:(1.4615,0.02257,0.01593,-0.0477,0.0119,1.0000),
            12.250:(1.4742,0.02348,0.01687,-0.0462,0.0109,1.0000),
            12.500:(1.4872,0.02438,0.01781,-0.0448,0.0099,1.0000),
            12.750:(1.4988,0.02541,0.01887,-0.0434,0.0088,1.0000),
            13.000:(1.5096,0.02654,0.02002,-0.0420,0.0083,1.0000),
            13.250:(1.5198,0.02773,0.02125,-0.0406,0.0079,1.0000),
            13.500:(1.5295,0.02899,0.02256,-0.0393,0.0077,1.0000),
            13.750:(1.5386,0.03036,0.02398,-0.0380,0.0074,1.0000),
            14.000:(1.5468,0.03182,0.02550,-0.0368,0.0071,1.0000),
            14.250:(1.5543,0.03338,0.02713,-0.0357,0.0069,1.0000),
            14.500:(1.5611,0.03505,0.02886,-0.0346,0.0067,1.0000),
            14.750:(1.5686,0.03671,0.03059,-0.0337,0.0066,1.0000),
            15.000:(1.5750,0.03848,0.03244,-0.0328,0.0065,1.0000),
            15.250:(1.5805,0.04039,0.03442,-0.0320,0.0063,1.0000),
            15.500:(1.5852,0.04244,0.03656,-0.0312,0.0062,1.0000),
            15.750:(1.5889,0.04465,0.03885,-0.0306,0.0060,1.0000),
            16.000:(1.5915,0.04701,0.04129,-0.0300,0.0058,1.0000),
            16.250:(1.5931,0.04954,0.04391,-0.0296,0.0057,1.0000),
            16.500:(1.5934,0.05229,0.04674,-0.0292,0.0055,1.0000),
            16.750:(1.5924,0.05527,0.04981,-0.0290,0.0054,1.0000),
            17.000:(1.5899,0.05847,0.05310,-0.0289,0.0052,1.0000),
            17.250:(1.5853,0.06202,0.05674,-0.0290,0.0051,1.0000),
            17.500:(1.5790,0.06593,0.06075,-0.0293,0.0050,1.0000),
            17.750:(1.5765,0.06941,0.06433,-0.0297,0.0049,1.0000),
            18.000:(1.5732,0.07306,0.06808,-0.0302,0.0048,1.0000),
            18.250:(1.5679,0.07706,0.07219,-0.0309,0.0048,1.0000),
            18.500:(1.5617,0.08128,0.07650,-0.0318,0.0047,1.0000),
            18.750:(1.5542,0.08577,0.08111,-0.0329,0.0046,1.0000),
            19.000:(1.5451,0.09058,0.08603,-0.0342,0.0045,1.0000),
            19.250:(1.5352,0.09557,0.09112,-0.0356,0.0044,1.0000),
            },
        }

dict_samples['Тяжёлый планёр (18 пегасов)'] = {
        'Масса аппарата (килограмм)':5500+18*70,
        'Рабочее вещество ВРД (килограмм)':5*18,
        'Скорость реактивной струи (метров/секунду)':437,
        'Энергии на сжатие рабочего вещества (мегаджоулей)':1.3*18,
        'Запас энергии (мегаджоулей)':45*18,
        'Размах крыла (метров)':29.4,
        'Хорда крыла (метров)':2.4,
        'Толщина крыла (метров)':2.4/10,
        'Несущая площадь крыла (квадратных метров)':200,
        'Фронтальная площадь крыла (квадратных метров)':(2.4/10)*29.4,
        'Длина фюзеляжа (метров)':1.43,
        'Ширина фюзеляжа (метров)':0.38,
        'Фронтальная площадь фюзеляжа (квадратных метров)':5.25,
        'Коэффициент лобового сопротивления фюзеляжа':0.1,
        'Дисколёт':False,
        # Сомнительно. Нужно найти подходящую поляру для триплана:
        'Поляра профиля крыла':{
            # Xfoil polar. Reynolds number fixed. Mach  number fixed
            # Polar key,xf-goe796-il-1000000-n5
            # Airfoil,goe796-il
            # Reynolds number,1000000
            # Ncrit,5
            # Mach,0
            # Max Cl/Cd,105.186
            # Max Cl/Cd alpha,4.75
            # Url,http://airfoiltools.com/polar/csv?polar=xf-goe796-il-1000000-n5
            # 
            # Alpha,Cl,Cd,Cdp,Cm,Top_Xtr,Bot_Xtr
            -14.500:(-0.7184,0.09505,0.09285,-0.0435,1.0000,0.0126),
            -14.250:(-0.7933,0.07833,0.07598,-0.0538,1.0000,0.0125),
            -14.000:(-0.9955,0.03555,0.03243,-0.0901,1.0000,0.0118),
            -13.750:(-1.0103,0.03312,0.02988,-0.0876,0.9999,0.0118),
            -13.500:(-0.9952,0.03086,0.02748,-0.0893,0.9950,0.0120),
            -13.250:(-0.9776,0.02911,0.02561,-0.0903,0.9899,0.0121),
            -13.000:(-0.9582,0.02761,0.02400,-0.0910,0.9853,0.0122),
            -12.750:(-0.9381,0.02629,0.02257,-0.0915,0.9810,0.0123),
            -12.500:(-0.9188,0.02509,0.02127,-0.0914,0.9755,0.0124),
            -12.000:(-0.8789,0.02298,0.01894,-0.0909,0.9651,0.0127),
            -11.750:(-0.8587,0.02205,0.01790,-0.0904,0.9598,0.0128),
            -11.500:(-0.8380,0.02120,0.01694,-0.0899,0.9547,0.0129),
            -11.250:(-0.8166,0.02044,0.01609,-0.0893,0.9491,0.0131),
            -11.000:(-0.7947,0.01974,0.01529,-0.0887,0.9440,0.0133),
            -10.750:(-0.7721,0.01905,0.01451,-0.0882,0.9390,0.0134),
            -10.500:(-0.7492,0.01841,0.01377,-0.0878,0.9332,0.0136),
            -10.250:(-0.7259,0.01782,0.01309,-0.0872,0.9279,0.0138),
            -10.000:(-0.7018,0.01723,0.01241,-0.0869,0.9227,0.0139),
            -9.750:(-0.6775,0.01670,0.01180,-0.0865,0.9166,0.0141),
            -9.500:(-0.6529,0.01622,0.01123,-0.0861,0.9109,0.0142),
            -9.250:(-0.6282,0.01566,0.01058,-0.0858,0.9043,0.0143),
            -9.000:(-0.6034,0.01514,0.00997,-0.0854,0.8977,0.0143),
            -8.750:(-0.5780,0.01465,0.00940,-0.0851,0.8909,0.0144),
            -8.500:(-0.5526,0.01419,0.00885,-0.0848,0.8830,0.0144),
            -8.250:(-0.5268,0.01375,0.00833,-0.0845,0.8749,0.0144),
            -8.000:(-0.5009,0.01335,0.00783,-0.0842,0.8664,0.0145),
            -7.750:(-0.4746,0.01295,0.00736,-0.0840,0.8571,0.0145),
            -7.500:(-0.4483,0.01259,0.00692,-0.0838,0.8471,0.0145),
            -7.250:(-0.4223,0.01217,0.00640,-0.0835,0.8357,0.0146),
            -7.000:(-0.3959,0.01178,0.00592,-0.0833,0.8236,0.0147),
            -6.750:(-0.3692,0.01144,0.00549,-0.0831,0.8118,0.0148),
            -6.500:(-0.3423,0.01114,0.00510,-0.0829,0.7998,0.0149),
            -6.250:(-0.3154,0.01087,0.00474,-0.0828,0.7876,0.0150),
            -6.000:(-0.2882,0.01062,0.00441,-0.0826,0.7757,0.0151),
            -5.750:(-0.2607,0.01039,0.00411,-0.0825,0.7654,0.0153),
            -5.500:(-0.2332,0.01018,0.00383,-0.0825,0.7565,0.0154),
            -5.250:(-0.2055,0.00997,0.00357,-0.0824,0.7476,0.0156),
            -5.000:(-0.1777,0.00979,0.00333,-0.0824,0.7395,0.0159),
            -4.750:(-0.1499,0.00963,0.00312,-0.0824,0.7308,0.0162),
            -4.500:(-0.1219,0.00948,0.00292,-0.0824,0.7226,0.0164),
            -4.250:(-0.0940,0.00936,0.00274,-0.0823,0.7136,0.0166),
            -4.000:(-0.0658,0.00923,0.00257,-0.0824,0.7061,0.0169),
            -3.750:(-0.0377,0.00912,0.00241,-0.0824,0.6992,0.0174),
            -3.500:(-0.0093,0.00901,0.00228,-0.0824,0.6933,0.0178),
            -3.250:(0.0190,0.00890,0.00214,-0.0825,0.6860,0.0192),
            -3.000:(0.0467,0.00869,0.00198,-0.0825,0.6794,0.0313),
            -2.750:(0.0750,0.00854,0.00187,-0.0826,0.6736,0.0427),
            -2.500:(0.1033,0.00846,0.00178,-0.0826,0.6672,0.0481),
            -2.250:(0.1318,0.00838,0.00170,-0.0827,0.6613,0.0529),
            -2.000:(0.1601,0.00830,0.00163,-0.0828,0.6542,0.0580),
            -1.750:(0.1883,0.00822,0.00156,-0.0829,0.6468,0.0684),
            -1.500:(0.2165,0.00811,0.00153,-0.0829,0.6383,0.0873),
            -1.250:(0.2449,0.00809,0.00150,-0.0830,0.6311,0.0948),
            -1.000:(0.2736,0.00806,0.00146,-0.0832,0.6248,0.0989),
            -0.500:(0.3306,0.00799,0.00141,-0.0834,0.6132,0.1106),
            -0.250:(0.3590,0.00795,0.00139,-0.0835,0.6063,0.1202),
            0.000:(0.3872,0.00794,0.00138,-0.0835,0.5963,0.1273),
            0.250:(0.4151,0.00794,0.00137,-0.0836,0.5828,0.1391),
            0.500:(0.4428,0.00791,0.00138,-0.0836,0.5701,0.1624),
            0.750:(0.4706,0.00786,0.00139,-0.0836,0.5590,0.1962),
            1.000:(0.4985,0.00782,0.00141,-0.0837,0.5481,0.2299),
            1.250:(0.5260,0.00778,0.00145,-0.0837,0.5355,0.2714),
            1.750:(0.5788,0.00755,0.00157,-0.0834,0.4970,0.4509),
            2.000:(0.6045,0.00750,0.00167,-0.0832,0.4719,0.5421),
            2.250:(0.6288,0.00739,0.00179,-0.0827,0.4441,0.6663),
            2.500:(0.6521,0.00734,0.00194,-0.0818,0.4149,0.7780),
            2.750:(0.6711,0.00719,0.00213,-0.0797,0.3927,0.9270),
            3.000:(0.7055,0.00741,0.00229,-0.0811,0.3718,0.9783),
            3.250:(0.7464,0.00765,0.00244,-0.0841,0.3551,0.9956),
            3.750:(0.8076,0.00797,0.00267,-0.0856,0.3354,1.0000),
            4.250:(0.8568,0.00829,0.00291,-0.0843,0.3178,1.0000),
            4.500:(0.8816,0.00847,0.00304,-0.0838,0.3105,1.0000),
            4.750:(0.9067,0.00862,0.00317,-0.0833,0.3014,1.0000),
            5.000:(0.9310,0.00886,0.00333,-0.0826,0.2858,1.0000),
            5.250:(0.9548,0.00913,0.00351,-0.0820,0.2673,1.0000),
            5.500:(0.9781,0.00945,0.00371,-0.0812,0.2422,1.0000),
            5.750:(0.9971,0.01009,0.00406,-0.0798,0.1915,1.0000),
            6.250:(1.0416,0.01088,0.00465,-0.0780,0.1550,1.0000),
            6.500:(1.0656,0.01115,0.00490,-0.0774,0.1477,1.0000),
            6.750:(1.0900,0.01138,0.00512,-0.0769,0.1422,1.0000),
            7.000:(1.1135,0.01167,0.00537,-0.0762,0.1350,1.0000),
            7.250:(1.1374,0.01192,0.00561,-0.0756,0.1278,1.0000),
            7.500:(1.1600,0.01226,0.00590,-0.0748,0.1180,1.0000),
            7.750:(1.1817,0.01264,0.00621,-0.0739,0.1048,1.0000),
            8.000:(1.2018,0.01313,0.00659,-0.0727,0.0880,1.0000),
            8.250:(1.2218,0.01359,0.00699,-0.0716,0.0761,1.0000),
            8.500:(1.2422,0.01401,0.00738,-0.0704,0.0685,1.0000),
            8.750:(1.2625,0.01440,0.00775,-0.0693,0.0626,1.0000),
            9.000:(1.2818,0.01482,0.00815,-0.0680,0.0568,1.0000),
            9.250:(1.2992,0.01525,0.00856,-0.0663,0.0515,1.0000),
            9.500:(1.3167,0.01567,0.00899,-0.0647,0.0476,1.0000),
            9.750:(1.3326,0.01620,0.00949,-0.0629,0.0414,1.0000),
            10.000:(1.3472,0.01682,0.01007,-0.0609,0.0335,1.0000),
            10.250:(1.3592,0.01761,0.01080,-0.0587,0.0236,1.0000),
            10.500:(1.3730,0.01833,0.01150,-0.0568,0.0193,1.0000),
            10.750:(1.3881,0.01898,0.01217,-0.0552,0.0171,1.0000),
            11.000:(1.4035,0.01962,0.01284,-0.0536,0.0158,1.0000),
            11.250:(1.4179,0.02034,0.01359,-0.0520,0.0146,1.0000),
            11.500:(1.4330,0.02104,0.01432,-0.0506,0.0138,1.0000),
            11.750:(1.4479,0.02175,0.01507,-0.0492,0.0129,1.0000),
            12.000:(1.4615,0.02257,0.01593,-0.0477,0.0119,1.0000),
            12.250:(1.4742,0.02348,0.01687,-0.0462,0.0109,1.0000),
            12.500:(1.4872,0.02438,0.01781,-0.0448,0.0099,1.0000),
            12.750:(1.4988,0.02541,0.01887,-0.0434,0.0088,1.0000),
            13.000:(1.5096,0.02654,0.02002,-0.0420,0.0083,1.0000),
            13.250:(1.5198,0.02773,0.02125,-0.0406,0.0079,1.0000),
            13.500:(1.5295,0.02899,0.02256,-0.0393,0.0077,1.0000),
            13.750:(1.5386,0.03036,0.02398,-0.0380,0.0074,1.0000),
            14.000:(1.5468,0.03182,0.02550,-0.0368,0.0071,1.0000),
            14.250:(1.5543,0.03338,0.02713,-0.0357,0.0069,1.0000),
            14.500:(1.5611,0.03505,0.02886,-0.0346,0.0067,1.0000),
            14.750:(1.5686,0.03671,0.03059,-0.0337,0.0066,1.0000),
            15.000:(1.5750,0.03848,0.03244,-0.0328,0.0065,1.0000),
            15.250:(1.5805,0.04039,0.03442,-0.0320,0.0063,1.0000),
            15.500:(1.5852,0.04244,0.03656,-0.0312,0.0062,1.0000),
            15.750:(1.5889,0.04465,0.03885,-0.0306,0.0060,1.0000),
            16.000:(1.5915,0.04701,0.04129,-0.0300,0.0058,1.0000),
            16.250:(1.5931,0.04954,0.04391,-0.0296,0.0057,1.0000),
            16.500:(1.5934,0.05229,0.04674,-0.0292,0.0055,1.0000),
            16.750:(1.5924,0.05527,0.04981,-0.0290,0.0054,1.0000),
            17.000:(1.5899,0.05847,0.05310,-0.0289,0.0052,1.0000),
            17.250:(1.5853,0.06202,0.05674,-0.0290,0.0051,1.0000),
            17.500:(1.5790,0.06593,0.06075,-0.0293,0.0050,1.0000),
            17.750:(1.5765,0.06941,0.06433,-0.0297,0.0049,1.0000),
            18.000:(1.5732,0.07306,0.06808,-0.0302,0.0048,1.0000),
            18.250:(1.5679,0.07706,0.07219,-0.0309,0.0048,1.0000),
            18.500:(1.5617,0.08128,0.07650,-0.0318,0.0047,1.0000),
            18.750:(1.5542,0.08577,0.08111,-0.0329,0.0046,1.0000),
            19.000:(1.5451,0.09058,0.08603,-0.0342,0.0045,1.0000),
            19.250:(1.5352,0.09557,0.09112,-0.0356,0.0044,1.0000),
            },
        }

#dict_samples['Пегас на контуре левитации'] = {
#        # https://en.wikipedia.org/wiki/Sack_AS-6
#        # https://en.wikipedia.org/wiki/Flying_Pancake
#        # http://www.airwar.ru/enc/glider/diskoplan2.html
#        # http://www.aviajournal.com/arhiv/2003/12/06.html
#        'Масса аппарата (килограмм)':70,
#        'Рабочее вещество ВРД (килограмм)':5,
#        'Скорость реактивной струи (метров/секунду)':437,
#        'Энергии на сжатие рабочего вещества (мегаджоулей)':1.3,
#        'Запас энергии (мегаджоулей)':45,
#        'Коэффициент лобового сопротивления':0.1,
#        'Площадь фронтальной проекции (квадратных метров)':2,
#        'Размах крыла (метров)':4,
#        'Хорда крыла (метров)':4,
#        'Несущая площадь крыла (квадратных метров)':12.6,
#        'Поляра профиля крыла':{
#            # http://airfoiltools.com/images/airfoil/davis-corrected-il_l.png
#            # http://airfoiltools.com/airfoil/details?airfoil=davis-corrected-il
#            # http://www.aviajournal.com/arhiv/2003/12/06.html
#            # Alpha,Cl,Cd
#            0.0:(0.05,0.03),
#            2.0:(0.1,0.04),
#            4.0:(0.17,0.05),
#            6.0:(0.3,0.06),
#            8.0:(0.37,0.07),
#            10.0:(0.42,0.08),
#            12.0:(0.5,0.08),
#            14.0:(0.58,0.09),
#            16.0:(0.63,0.1),
#            18.0:(0.7,0.12),
#            20.0:(0.78,0.15),
#            22.0:(0.79,0.2),
#            24.0:(0.8,0.23),
#            26.0:(0.81,0.26),
#            28.0:(0.805,0.29),
#            30.0:(0.8,0.32),
#            },
#        }
#
#dict_samples['Единорожья левитирующая сфера'] = {
#        'Масса аппарата (килограмм)':0.3,
#        'Рабочее вещество ВРД (килограмм)':0.005,
#        'Скорость реактивной струи (метров/секунду)':437,
#        'Энергии на сжатие рабочего вещества (мегаджоулей)':0.0013,
#        'Запас энергии (мегаджоулей)':0.0014,
#        'Коэффициент лобового сопротивления':0.47,
#        'Площадь фронтальной проекции (квадратных метров)':0.03,
#        'Размах крыла (метров)':0.01,
#        'Хорда крыла (метров)':0.01,
#        'Несущая площадь крыла (квадратных метров)':0.03,
#        'Поляра профиля крыла':{
#            # http://airfoiltools.com/images/airfoil/davis-corrected-il_l.png
#            # http://airfoiltools.com/airfoil/details?airfoil=davis-corrected-il
#            # http://www.aviajournal.com/arhiv/2003/12/06.html
#            # Alpha,Cl,Cd
#            0.0:(0.05,0.03),
#            2.0:(0.1,0.04),
#            4.0:(0.17,0.05),
#            6.0:(0.3,0.06),
#            8.0:(0.37,0.07),
#            10.0:(0.42,0.08),
#            12.0:(0.5,0.08),
#            14.0:(0.58,0.09),
#            16.0:(0.63,0.1),
#            18.0:(0.7,0.12),
#            20.0:(0.78,0.15),
#            22.0:(0.79,0.2),
#            24.0:(0.8,0.23),
#            26.0:(0.81,0.26),
#            28.0:(0.805,0.29),
#            30.0:(0.8,0.32),
#            },
#        }

#-------------------------------------------------------------------------
# Функции интерфейса:

def create_parser():
    """Список доступных параметров скрипта."""
    parser = argparse.ArgumentParser()
    parser.add_argument('sample',
                        nargs='*',
                        help='Летательный аппарат (в "кавычках")'
                        )
    parser.add_argument('-a', '--angle',
                        action='store', dest='angle', type=float,
                        help='Угол атаки (0-20)'
                        )
    parser.add_argument('-s', '--speed',
                        action='store', dest='speed', type=int,
                        help='Постоянная скорость (км/час)'
                        )
    parser.add_argument('-w', '--weight',
                        action='store', dest='weight', type=int,
                        help='Полезная нагрузка (кг)'
                        )
    parser.add_argument('-e', '--energy',
                        action='store_true', default='False',
                        help='Пополнение энергии в полёте'
                        )
    parser.add_argument('-m', '--model',
                        action='store_true', default='False',
                        help='Поиск оптимальных значений'
                        )
    return parser

def key_search (search_string, dict, silent=True):
    """Поиск нужного объекта в словаре, выбор по списку совпадений."""
    # Создаётся регистронезависимая поисковая строка:
    p = re.compile(search_string, re.I)
    # Создаём словарь совпадений:
    dict_found = {}
    counter = 0
    # Поиск в словаре:
    for line in sorted(dict.keys()):
        line = str(line)
        if p.findall(line):
            dict_found[counter] = line
            search_string = line
            counter = counter + 1
    # Если искомое не найдено, тогда выход:
    if not dict_found:
        print(search_string)
        print('---Совпадений не найдено')
        exit(0)
    # Если найден один варинт, тогда его и выбираем:
    elif len(dict_found) == 1:
        sample = dict_found[0]
    elif silent is True:
        search_string = dict_found[0]
        sample = search_string
    # Если несколько совпадений, тогда выбор по номеру:
    else:
        for key in dict_found:
            print(key,dict_found[key])
        string_number = input('---Найдено несколько совпадений (введите номер): ')
        search_string = dict_found[int(string_number)]
        sample = search_string
        print('-----------------------------------------------------')
    return sample

#-------------------------------------------------------------------------
# Функции скрипта:

def f_triangle (side_b, angle_a, angle_b):
    """Сторона треугольника по двум углам и другой стороне.

    Теорема синусов:
    # http://www-formula.ru/lengthpartiestriangle
    a = (b * sin(α))/sin(β)
    Где:
    b - известная сторона
    α - угол противолежащий от стороны a и прилежащий к стороне b.
    β - угол противолежащий от стороны b и прилежащий к стороне a.
    """
    # math.sin ждёт угла в радианах, поэтому преобразуем градусы с помощью math.radians
    side_a = abs(side_b * math.sin(math.radians(angle_a))) / math.sin(math.radians(angle_b))
    return side_a

def f_drag_force (aerodynamic_coefficient, air_density, velocity, aerodynamic_square):
    """Аэродинамическое сопротивление.

    X=Ca*((p*V^2)/2)*S
    X — сопротивление в Ньютонах
    Ca — коэффициент аэродинамического сопротивления (0.04 для крыла)
    Cy - коэффициент подъёмной силы (зависит от угла атаки 5°=0.4, 9°=0.8, 15°=1.2)
    p — плотность воздуха в кг/м³ (1.2 при 20°C)
    V — скорость в м/с (50 м/с из прошлой формулы)
    S — площадь поперечного сечения (2 м²)
    """
    drag_force = aerodynamic_coefficient * ((air_density * velocity ** 2) / 2) * aerodynamic_square
    return drag_force

def f_wing_aspect_ratio (wingspan, wing_square):
    """Геометрическое удлинение крыла.
    
    L = l/b = l^2/S
    Где:
    l - размах крыла (длина прямой между крайними точками)
    b - средняя хорда крыла
    S - площадь крыла в м²
    """
    # Эта формула подходит только для прямых крыльев:
    wing_aspect_ratio = WINGSPAN / WING_WIDTH
    # А эта не работает для бипланов/трипланов:
    #wing_aspect_ratio = WINGSPAN ** 2 / WING_SQUARE
    return wing_aspect_ratio

def f_lift_induced_drag (wing_aerodynamic, wing_aspect_ratio):
    """Индуктивное лобовое сопротивление.

    Формула индуктивного сопротивления:
    Cxi = Cy/(1.4*L)
    Где:
    Cxi - коэффициент индуктивного сопротивления
    Cy - коэффициент подъёмной силы (зависит от угла атаки 5°=0.4, 9°=0.8, 15°=1.2)
    L - геометрическое удлинение крыла (6.4)
    """
    lift_induced_drag = abs(wing_aerodynamic / (1.4 * wing_aspect_ratio))
    return lift_induced_drag

def f_aerodynamic (angle_of_attack):
    """Аэродинамические показатели меняются со сменой угла атаки.
    
    1) Площадь фронтальной проекции зависит от наклона.
    2) Коэффициенты подъёмной силы и сопротивления крыла берутся из поляры.
    2) Коэффициент индуктивного сопротивления зависит от размаха и площади крыла.
    """
    # Фронтальная проекция зависит от угла атаки:
    if f_triangle(WING_WIDTH, angle_of_attack, 90) > WING_THICKNESS:
        wing_front_square = WINGSPAN * f_triangle(WING_WIDTH, angle_of_attack, 90)
        body_front_square = BODY_FRONT_SQUARE + BODY_WIDTH * f_triangle(BODY_LENGTH, angle_of_attack, 90)
    else:
        wing_front_square = WINGSPAN * WING_THICKNESS
        body_front_square = BODY_FRONT_SQUARE
    # Вычисляем общую фронтальную поверхность:
    total_front_square = wing_front_square + body_front_square
    # Коэффициенты подъёмной силы и лобового сопротивления крыла берём из таблицы: 
    wing_aerodynamic = dict_polar.get(angle_of_attack)[0]
    wing_drag = dict_polar.get(angle_of_attack)[1]
    # Вычисляем общий коэффициент лобового сопротивления:
    wing_square_percent = wing_front_square / total_front_square
    body_square_percent = body_front_square / total_front_square
    front_aerodynamic = wing_drag * wing_square_percent + BODY_DRAG * body_square_percent
    # Считаем коэффициент индуктивного сопротивления (для дисколёта он значительной снижается):
    if DISK_WING is False:
        lift_induced_drag = f_lift_induced_drag(wing_aerodynamic,
                f_wing_aspect_ratio(WINGSPAN, WING_SQUARE))
        # Коэффициент общего лобового сопротивления:
        total_front_aerodynamic = front_aerodynamic + lift_induced_drag
    else:
        total_front_aerodynamic = front_aerodynamic
    aerodynamic_output = (total_front_square, wing_aerodynamic, total_front_aerodynamic)
    return aerodynamic_output

def f_jet_force (working_mass, reactive_speed):
    """Предельная тяга летательного аппарата."""
    max_engine_thrust = WORKING_MASS * REACTIVE_SPEED
    return max_engine_thrust

def f_glide_model (aircraft_mass, aircraft_speed, angle_of_attack):
    """Модель планирования."""
    # Аэродинамические свойства зависят от угла атаки:
    total_front_square, wing_aerodynamic, total_front_aerodynamic = f_aerodynamic(angle_of_attack)
    speed_kilometre_hour = aircraft_speed * 3.6
    path = 0
    altitude = 0
    descent_speed = 0
    second = 1
    dict_descent = {}
    while second < 60:
        drag_force = f_drag_force(total_front_aerodynamic,AIR_DENSITY,aircraft_speed,total_front_square)
        lift_force = f_drag_force(wing_aerodynamic,AIR_DENSITY,aircraft_speed,WING_SQUARE)
        lift_force_kilogram = lift_force / GRAVITATIONAL_ACCELERATION
        # Не забудь раскидать по отдельным функциям.
        # Набор высоты:
        if angle_of_attack > 0 and lift_force_kilogram > aircraft_mass:
            # Замедление из-за аэродинамического сопротивления:
            drag_deceleration = drag_force / aircraft_mass
            rate_of_climb = f_triangle(aircraft_speed, angle_of_attack, 90)
            altitude = altitude + rate_of_climb
            aircraft_speed = aircraft_speed - drag_deceleration
        # Сваливание:
        elif angle_of_attack > 0 and lift_force_kilogram < aircraft_mass:
            drag_deceleration = drag_force / aircraft_mass
            # Потеря высоты из за нехватки подъёмной силы:
            if lift_force > 0:
                descent_force = (aircraft_mass * GRAVITATIONAL_ACCELERATION) - lift_force
            else:
                descent_force = (aircraft_mass * GRAVITATIONAL_ACCELERATION) + abs(lift_force)
            descent_acceleration = descent_force / aircraft_mass
            descent_speed = descent_speed + descent_acceleration
            # Компенсация потери высоты за счёт вектора скорости:
            rate_of_descent = descent_speed - f_triangle(aircraft_speed, angle_of_attack, 90)
            if rate_of_descent < 0:
                rate_of_climb = abs(rate_of_descent)
                altitude = altitude + rate_of_climb
            else:
                altitude = altitude - rate_of_descent
            aircraft_speed = aircraft_speed - drag_deceleration
        # Пикирование:
        elif angle_of_attack < 0 and lift_force < 0:
            descent_force = (aircraft_mass * GRAVITATIONAL_ACCELERATION) + abs(lift_force)
            descent_acceleration = descent_force / aircraft_mass
            descent_speed = descent_speed + descent_acceleration
            # Крыло скользит по воздуху под углом, поэтому вектор силы реакции опоры отклоняется вперёд.
            # Часть силы притяжения и давления воздуха на крыло переходит в силу тяги:
            incline_force = abs(descent_force * math.sin(math.radians(angle_of_attack)))
            incline_force = incline_force - drag_force
            incline_acceleration = incline_force / aircraft_mass
            # Вектор скорости летательного аппарата направлен под углом к земле:
            rate_of_descent = descent_speed + f_triangle(aircraft_speed, angle_of_attack, 90)
            altitude = altitude - rate_of_descent
            aircraft_speed = aircraft_speed + incline_acceleration
        # Планирование:
        #elif angle_of_attack < 0 and lift_force_kilogram > aircraft_mass:
        # Поиск угла атаки меньше нуля, но с достаточно подъёмной силой.
        else:
            print('Что-то пошло не так. glide_model')
        # Считаем модель пока пони не приземлится.
        if altitude <= 0:
            print('Приземление')
            break
        # Скорость, это векторная величина, а расстояние по горизонтали -- соседняя сторона треугольника:
        distance = f_triangle(aircraft_speed, 90 - angle_of_attack, 90)
        path = path + distance
        # Данные сохраняются в словаре:
        dict_descent[second] = (speed_kilometre_hour, drag_force, lift_force_kilogram,
                second, path, altitude)
        speed_kilometre_hour = aircraft_speed * 3.6
        print(round(speed_kilometre_hour),round(path),round(altitude))
        second += 1
    # В вывод идут данные цикла до момента сваливания.
    if dict_descent:
        glide_output = dict_descent[len(dict_descent)]
        return glide_output

def f_flight_model (speed):
    """Модель полёта с постоянной скоростью."""
    # Аэродинамические свойства зависят от угла атаки:
    total_front_square, wing_aerodynamic, total_front_aerodynamic = f_aerodynamic(angle_of_attack)
    speed_kilometre_hour = speed
    speed_metre_second = speed / 3.6
    aircraft_speed = speed_metre_second
    second = 1
    path = 0
    altitude = 0
    engine_cycles = 1
    working_mass_balance = WORKING_MASS
    energy_balance = ENERGY_BALANCE_MJ
    # Этот цикл сильно замедляет программу. Но пони собирает энергию в полёте, а плотность воздуха падает.
    while energy_balance > WORKING_MASS_ENERGY_MJ:
        drag_force = f_drag_force(total_front_aerodynamic,AIR_DENSITY,speed_metre_second,total_front_square)
        lift_force = f_drag_force(wing_aerodynamic,AIR_DENSITY,speed_metre_second,WING_SQUARE)
        lift_force_kilogram = lift_force / GRAVITATIONAL_ACCELERATION
        # Расход рабочего вещества за секунду полёта:
        working_mass_consumpion = drag_force / REACTIVE_SPEED
        working_mass_balance -= working_mass_consumpion
        # Если рабочее вещество кончается, пополняем новым циклом:
        if working_mass_balance < 0:
            working_mass_balance += WORKING_MASS
            energy_balance -= WORKING_MASS_ENERGY_MJ
            engine_cycles += 1
        # В ходе полёта пополняем энергию (за счёт всей фронтальной поверхности тела):
        air_volume = total_front_square * aircraft_speed
        energy_collection = air_volume * AIR_MAGIC_ENERGY_MJ
        if namespace.energy is True:
            energy_balance += energy_collection
        # Пройденный путь:
        distance = f_triangle(aircraft_speed, 90 - angle_of_attack, 90)
        path = path + distance
        # Скороподъёмность:
        rate_of_climb = f_triangle(aircraft_speed, angle_of_attack, 90)
        # Набранная высота:
        altitude = altitude + rate_of_climb
        if aircraft_mass > lift_force_kilogram:
            #print('Сваливание.')
            break
        second += 1
    # Промежуток между циклами двигателя:
    cycle_period = second / engine_cycles
    flight_output = (
            round(speed_kilometre_hour), round(drag_force), round(lift_force_kilogram),
            second, round(path), round(altitude), engine_cycles, round(cycle_period),
            )
    return flight_output

def f_find_optimum_speed (max_speed):
    """Оптимальные значения скорости для определённого угла."""
    speed = 0
    dict_test_model = {}
    while speed < max_speed:
        key = speed
        dict_test_model[key] = f_flight_model(speed)
        speed += 1
    optimum_speed = max(dict_test_model.keys(), key=(lambda k: dict_test_model[k][4]))
    #max_distance_output = dict_test_model[optimum_speed]
    return optimum_speed

def f_find_optimum_angle (speed):
    """Оптимальный угол для определённой скорости."""
    # Хау, функция не работает. Но иногда нужно просто остановиться. Позже допилишь.
    dict_test_model = {}
    for key in dict_polar:
        angle_of_attack = key
        dict_test_model[key] = f_flight_model(speed)
    optimum_angle = max(dict_test_model.keys(), key=(lambda k: dict_test_model[k][4]))
    for value in dict_test_model.values():
        print(value)
    return optimum_angle

#-------------------------------------------------------------------------
# Встроенный поисковик:

# Создаётся список аргументов скрипта:
parser = create_parser()
namespace = parser.parse_args()

# Проверка, введено ли название летательного аппарата:
if namespace.sample:
    sample = ' '.join(namespace.sample)
else:
    # Если нет, берём стандартный:
    sample = SAMPLE

# Если название неточное, срабатывает встроенный поисковик:
if sample not in dict_samples.keys():
    sample = key_search(sample, dict_samples, silent=False)
    print('Выбрано:', sample)
    #print(dict_samples[sample])

#-------------------------------------------------------------------------
# Рабочие переменные:

# Переменные двигателя:
AIRCRAFT_MASS = dict_samples[sample]['Масса аппарата (килограмм)']
WORKING_MASS = dict_samples[sample]['Рабочее вещество ВРД (килограмм)']
REACTIVE_SPEED = dict_samples[sample]['Скорость реактивной струи (метров/секунду)']
# Переменные аккумулятора:
WORKING_MASS_ENERGY_MJ = dict_samples[sample]['Энергии на сжатие рабочего вещества (мегаджоулей)']
ENERGY_BALANCE_MJ = dict_samples[sample]['Запас энергии (мегаджоулей)']
# Переменные планера (пегас на собственных крыльях):
WING_FRONT_SQUARE = dict_samples[sample]['Фронтальная площадь крыла (квадратных метров)']
BODY_FRONT_SQUARE = dict_samples[sample]['Фронтальная площадь фюзеляжа (квадратных метров)']
BODY_DRAG = dict_samples[sample]['Коэффициент лобового сопротивления фюзеляжа']
BODY_LENGTH = dict_samples[sample]['Длина фюзеляжа (метров)']
BODY_WIDTH = dict_samples[sample]['Ширина фюзеляжа (метров)']
WING_WIDTH = dict_samples[sample]['Хорда крыла (метров)']
WING_THICKNESS = dict_samples[sample]['Толщина крыла (метров)']
WINGSPAN = dict_samples[sample]['Размах крыла (метров)']
WING_SQUARE = dict_samples[sample]['Несущая площадь крыла (квадратных метров)']

# Словарь соответствий углов атаки и коэффициентов аэродинамики крыла:
dict_polar = dict_samples[sample]['Поляра профиля крыла']

# Нестандартное крыло:
if dict_samples[sample]['Дисколёт'] is True:
    DISK_WING = True
else:
    DISK_WING = False

#-------------------------------------------------------------------------
# Обработка аргументов командной строки:

# Проверка, указан ли угол атаки:
if namespace.angle:
    angle_of_attack = key_search(str(namespace.angle), dict_polar, silent=False)
    angle_of_attack = float(angle_of_attack)
    print('Выбрано:', angle_of_attack)
else:
    # Если нет, мспользовать угол с минимальный лобовымм сопротивлением:
    angle_of_attack = min(dict_polar.keys(), key=(lambda k: dict_polar[k][1]))

# Проверка, указан ли вес груза:
if namespace.weight:
    aircraft_mass = namespace.weight
else:
    aircraft_mass = AIRCRAFT_MASS

# Проверка, указана ли скорость:
if namespace.speed:
    aircraft_speed = namespace.speed
else:
    aircraft_speed = 0

#-------------------------------------------------------------------------
# Тело программы:

# Проверка, указана ли постоянная скорость:
if namespace.speed:
    # Если да, смотрим, насколько она реальна:
    print('Полёт с постоянной скоростью')
    flight_output = f_flight_model(namespace.speed)
    print('Скорость (км/час), лобовое сопротивление (ньютонов), подъёмная сила (кгс)')
    print(flight_output[0:3])
    print('Время, путь, высота, циклы двигателя, между циклами (секунд)')
    print(flight_output[3:8])
elif namespace.model is True:
    # Если нет, проверяем все варианты и выбираем оптимальный по дальности:
    if namespace.angle is None:
        dict_flight_angles = {}
        for key in dict_polar:
            if key > 0:
                print('Поиск оптимальной скорости для угла атаки:', key)
                angle_of_attack = key
                dict_flight_angles[key] = f_flight_model(f_find_optimum_speed(MAX_SPEED))
        optimum_angle = max(dict_flight_angles.keys(), key=(lambda k: dict_flight_angles[k][4]))
        optimum_output = dict_flight_angles[optimum_angle]
        print('Полёт с оптимальной скоростью и углом атаки:',optimum_angle)
        print('Скорость (км/час), лобовое сопротивление (ньютонов), подъёмная сила (кгс)')
        print(optimum_output[0:3])
        print('Время, путь, высота, циклы двигателя, между циклами (секунд)')
        print(optimum_output[3:8])
    else:
        print('Полёт с оптимальной скоростью')
        flight_output = f_flight_model(f_find_optimum_speed(MAX_SPEED))
        print('Скорость (км/час), лобовое сопротивление (ньютонов), подъёмная сила (кгс)')
        print(flight_output[0:3])
        print('Время, путь, высота, циклы двигателя, между циклами (секунд)')
        print(flight_output[3:8])
else:
    # В ином случае моделируем взлёт с оптимальным (или указанным) углом атаки:
    if namespace.angle is None:
        # Поиск угла с максимальной подъёмной силой:
        optimum_angle = max(dict_polar.keys(), key=(lambda k: dict_polar[k][0]))
        angle_of_attack = optimum_angle
        print('Взлёт с углом атаки:',optimum_angle)
    else:
        print('Взлёт')
    print('Скорость (км/час), путь, высота')
    # Пегас набирает предельную скорость за одну секунду:
    # А вообще, здесь надо бы поставить ускорение и длину взлётной полосы.
    max_engine_thrust = f_jet_force(WORKING_MASS, REACTIVE_SPEED)
    aircraft_acceleration = max_engine_thrust / aircraft_mass
    aircraft_speed = aircraft_acceleration
    # Пегас взлетает и падает:
    glide_output = f_glide_model(aircraft_mass, aircraft_speed ,angle_of_attack)
    # Избавлемся от чисел после запятой:
    glide_output = [round(i) for i in glide_output]
    print('Скорость (км/час), лобовое сопротивление (ньютонов), подъёмная сила (кгс)')
    print(glide_output[0:3])
    print('Время, путь, высота')
    print(glide_output[3:8])



    #start_output = f_start_model(aircraft_mass, angle_of_attack)
    #if start_output is None:
    #    print('Недостаточная скорость, недостаточный угол атаки.')
    #else:
    #    # Следом за взлётом моделируем снижение:
    #    if namespace.angle is None:
    #        # Выбираем оптимальный угол атаки и наращиваем скорость:
    #        optimum_angle = min(dict_polar.keys(), key=(lambda k: dict_polar[k][0]))
    #        angle_of_attack = optimum_angle
    #        print('Пикирование с углом атаки:',optimum_angle)
    #    else:
    #        print('Планирование')
    #    #f_glide_model_new(aircraft_mass,start_output,angle_of_attack)
    #    glide_output = f_glide_model_new(aircraft_mass,start_output,angle_of_attack)
    #    # Избавлемся от чисел после запятой:
    #    glide_output = [round(i) for i in glide_output]
    #    print('Скорость (км/час), лобовое сопротивление (ньютонов), подъёмная сила (кгс)')
    #    print(glide_output[0:3])
    #    print('Время, путь, высота')
    #    print(glide_output[3:8])
